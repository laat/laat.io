---
title: Hakyll, fig and docker.
---
#+STARTUP: showall
  In this tutorial, I will cover setting up a new Hakyll project with
  docker and fig to produce a docker container with . I will not cover
  how to deploy docker images in production or how to install docker
  or fig. If you do not have [[http://fig.sh][fig]] or [[http://docker.io][docker]] installed, do it now. =)

  First, lets create an empty git repository.

#+BEGIN_SRC bash
$ mkdir laat.io
$ cd laat.io
$ git init
$ git remote add origin git@github.com:laat/laat.io.git
#+END_SRC
  
** A docker file with Hakyll and Nginx
   */Dockerfile*
#+NAME: nginx.conf
#+BEGIN_SRC Dockerfile
FROM nginx:latest

RUN apt-get update && apt-get install -y haskell-platform locales && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# `cabal install hakyll` requires utf-8 locale
RUN dpkg-reconfigure locales && \
    locale-gen C.UTF-8 && \
    /usr/sbin/update-locale LANG=C.UTF-8
ENV LC_ALL C.UTF-8

# install hakyll
ENV HOME /root
ENV PATH $HOME/.cabal/bin:$PATH
RUN cabal update && cabal install hakyll

WORKDIR /src
ADD . /src
#+END_SRC

** Fig (Fast, isolated development)
   Even though you can do everything with vanilla docker, I like to
   use fig in development. It makes the commands easier, does not require
   me to create shell scripts because of long commands.


   */fig.yml*
#+NAME: fig.yml
#+BEGIN_SRC yaml
web:
  build: .
  volumes:
    - .:/src
  FROM nginx:latest
#+END_SRC
   
** Resulting tree structure

#+BEGIN_SRC bash
.
├── Dockerfile
└── fig.yml
#+END_SRC
   
** Build the docker image
#+BEGIN_SRC bash
$ fig build
#+END_SRC

    This takes a while, get a beer and buffer another in the freezer.
    Play some [[http://musicbrainz.org/artist/67f66c07-6e61-4026-ade5-7e782fad3a5d][/Foo Fighters/]], and get back here.

** generate the hakyll site sources
    This step runs the command =hakyll-init= inside the docker
    container. Because we have mounted the git repository to =/src= in
    =fig.yml= the files generated ends up inside our git repository (as
    opposed to hidden inside the container)

#+BEGIN_SRC bash
$ fig run web hakyll-init .
#+END_SRC

   =fig run web= executes the commands inside the docker container,
   and since the project folder is mounted as a volume we get the
   output

*** i like micro-commits
#+BEGIN_SRC bash
$ git add .
$ git commit -am "Initial commit"
$ git push origin master
#+END_SRC

** Generate the static files
#+BEGIN_SRC bash
$ fig run web ghc --make site.hs
$ fig run web ./site build
#+END_SRC
   
*** Slightly off topic:
    If you want to, you can at this stage run a server in the =_site/=
    folder to watch the blog in the browser at http://localhost:8000/

#+BEGIN_SRC bash
$ cd _site 
$ python -m SimpleHTTPServer 
$ cd .. # continue in the root of the git repo
#+END_SRC
    However, SimpleHTTPServer is not good enough for production. And I
    want to serve the static files with nginx, like a proper hipster.
    
*** Micro-commits is still nice
    The static files that we are going to serve with nginx is
    generated by hakyll, these files do not belong in the git
    repository alongside the source code.
    
    If your have been keeping up with the micro-commits this little
    trick can help you add the files to the git repository:

#+BEGIN_SRC bash
$ echo "$(git status --porcelain | grep '^??' | cut -c4-)" >>.gitignore 
$ git add .gitignore
$ git commit -am "ignore generated files"
#+END_SRC
    [[http://stackoverflow.com/a/15142010][source]]
    
    If you have been lazy, and haven't been micro-committing, shame on
    you. However, to get you going, this is the =.gitignore= file:

    */.gitignore*
#+NAME: .gitignore
#+BEGIN_SRC sh
_cache/
_site/
site
site.hi
site.o
#+END_SRC

** Setting up nginx 
   When generating files the static site ends up in the =_site/=
   folder. Lets create a basic configuration file for serving that
   folder.

   Nginx does not come with good content type support out of the box,
   so copy paste html 5 boilerplate configuration [[https://github.com/h5bp/server-configs-nginx/blob/master/mime.types][here]] to the
   indicated place in the configuration file.
   
   */nginx.conf*

#+NAME: nginx.conf
#+BEGIN_SRC Dockerfile
worker_processes  1;

events {
  worker_connections  1024;
}

http {
  server {
    listen       80;
    server_name     _;

    root    /src/_site;

    location / {
       try_files $uri.html $uri $uri/ /index.html;
    }

    # insert nginx types from HTML 5 boilerplate here.
  }
}
#+END_SRC

** Add nginx.conf and compile
   When we build the =Dockerfile= it is useful to compile the site so
   that we know that every change we made to the source files end up
   in the docker container. And while we are at it, copy the newly created =nginx.conf=
   to the correct folder within our image.
   
   Add these lines to the end of the =Dockerfile=:

#+BEGIN_SRC Dockerfile
RUN ghc --make site.hs
RUN ./site build
ADD nginx.conf /etc/nginx.conf
#+END_SRC

   
** Development ports 
   Running on port 80 is silly in development, lets change the ports
   locally from port 80 and 443 to 9080 and 9443 by changing =fig.yml=
   to:

   */fig.yml*
#+BEGIN_SRC yaml
web:
  build: .
  volumes:
    - .:/src
  ports:
    - "9080:80"
    - "9443:443"
#+END_SRC
   
*** micro cnommit

#+BEGIN_SRC bash
$ git add .
$ git commit -m "runnable state"
#+END_SRC
    
**  Build and run the blog

#+BEGIN_SRC bash
$ fig build
$ fig up
#+END_SRC

    browse to http://localhost:9080 to look at your blog. Isn't it beautiful?

** Almost there...
   To view the site changes in /almost/ real time, run this in a new shell:

#+BEGIN_SRC bash
$ fig run web ./site watch --no-server
#+END_SRC

   The files are most likely owned by *root*, lets take them back from that ass hat.
#+BEGIN_SRC bash
$ sudo chown -R $USER:$USER .
#+END_SRC
   
   The last thing on the agenda is creating a docker image you can
   push to a registry and run on a cloud provider.

#+BEGIN_SRC bash
$ docker build -t laat/laat-io .
#+END_SRC

   We are done, grab that beer in the freezer and start customizing
   the templates to your hearts content. Everything I have done up to
   this point, is on [[https://github.com/laat/laat.io/tree/00a55e8c3e1fd51419289bc22e276dd571e0be52][github]].
